var search_data = {"index":{"searchIndex":["kernel","uri","badurierror","error","ftp","file","generic","http","https","invalidcomponenterror","invalidurierror","ldap","ldaps","mailto","parser","regexp","rfc2396_parser","rfc2396_regexp","pattern","rfc3986_parser","schemes","util","ws","wss","+()","-()","==()","uri()","uri()","_decode_uri_component()","_encode_uri_component()","absolute()","absolute?()","attributes()","attributes=()","authority()","build()","build()","build()","build()","build()","build()","build()","build2()","build_path_query()","check_headers()","check_host()","check_opaque()","check_password()","check_password()","check_path()","check_port()","check_scheme()","check_to()","check_typecode()","check_user()","check_user()","check_userinfo()","check_userinfo()","coerce()","component()","component()","component_ary()","convert_to_uri()","convert_to_uri()","decode_uri_component()","decode_www_form()","decode_www_form_component()","decoded_password()","decoded_user()","default_port()","default_port()","dn()","dn=()","encode_uri_component()","encode_www_form()","encode_www_form_component()","eql?()","escape()","escape()","escape_userpass()","extensions()","extensions=()","extract()","extract()","extract()","filter()","filter=()","find_proxy()","for()","fragment=()","hash()","headers=()","hierarchical?()","hierarchical?()","host=()","hostname()","hostname=()","initialize_pattern()","initialize_pattern()","initialize_regexp()","initialize_regexp()","inspect()","inspect()","inspect()","join()","join()","join()","make_regexp()","make_regexp()","merge()","merge!()","merge_path()","new()","new()","new()","new()","new()","new()","normalize()","normalize!()","opaque=()","origin()","parse()","parse()","parse()","parse_dn()","parse_query()","parser()","password()","password=()","path()","path=()","port=()","query=()","regexp()","register_scheme()","registry=()","relative?()","replace!()","request_uri()","request_uri()","route_from()","route_to()","scheme=()","scheme_list()","scope()","scope=()","select()","set_attributes()","set_dn()","set_extensions()","set_filter()","set_headers()","set_host()","set_host()","set_opaque()","set_password()","set_password()","set_path()","set_path()","set_port()","set_port()","set_scheme()","set_scope()","set_to()","set_typecode()","set_user()","set_user()","set_userinfo()","set_userinfo()","split()","split()","split()","split_path()","split_userinfo()","to=()","to_mailtext()","to_rfc822text()","to_s()","to_s()","to_s()","typecode=()","unescape()","unescape()","user()","user=()","userinfo()","userinfo=()"],"longSearchIndex":["kernel","uri","uri::badurierror","uri::error","uri::ftp","uri::file","uri::generic","uri::http","uri::https","uri::invalidcomponenterror","uri::invalidurierror","uri::ldap","uri::ldaps","uri::mailto","uri::parser","uri::regexp","uri::rfc2396_parser","uri::rfc2396_regexp","uri::rfc2396_regexp::pattern","uri::rfc3986_parser","uri::schemes","uri::util","uri::ws","uri::wss","uri::generic#+()","uri::generic#-()","uri::generic#==()","kernel#uri()","kernel::uri()","uri::_decode_uri_component()","uri::_encode_uri_component()","uri::generic#absolute()","uri::generic#absolute?()","uri::ldap#attributes()","uri::ldap#attributes=()","uri::http#authority()","uri::ftp::build()","uri::file::build()","uri::generic::build()","uri::http::build()","uri::ldap::build()","uri::mailto::build()","uri::ws::build()","uri::generic::build2()","uri::ldap#build_path_query()","uri::mailto#check_headers()","uri::generic#check_host()","uri::generic#check_opaque()","uri::file#check_password()","uri::generic#check_password()","uri::generic#check_path()","uri::generic#check_port()","uri::generic#check_scheme()","uri::mailto#check_to()","uri::ftp#check_typecode()","uri::file#check_user()","uri::generic#check_user()","uri::file#check_userinfo()","uri::generic#check_userinfo()","uri::generic#coerce()","uri::generic::component()","uri::generic#component()","uri::generic#component_ary()","uri::rfc2396_parser#convert_to_uri()","uri::rfc2396_parser#convert_to_uri()","uri::decode_uri_component()","uri::decode_www_form()","uri::decode_www_form_component()","uri::generic#decoded_password()","uri::generic#decoded_user()","uri::generic::default_port()","uri::generic#default_port()","uri::ldap#dn()","uri::ldap#dn=()","uri::encode_uri_component()","uri::encode_www_form()","uri::encode_www_form_component()","uri::generic#eql?()","uri::rfc2396_parser#escape()","uri::rfc2396_parser#escape()","uri::generic#escape_userpass()","uri::ldap#extensions()","uri::ldap#extensions=()","uri::extract()","uri::rfc2396_parser#extract()","uri::rfc2396_parser#extract()","uri::ldap#filter()","uri::ldap#filter=()","uri::generic#find_proxy()","uri::for()","uri::generic#fragment=()","uri::generic#hash()","uri::mailto#headers=()","uri::generic#hierarchical?()","uri::ldap#hierarchical?()","uri::generic#host=()","uri::generic#hostname()","uri::generic#hostname=()","uri::rfc2396_parser#initialize_pattern()","uri::rfc2396_parser#initialize_pattern()","uri::rfc2396_parser#initialize_regexp()","uri::rfc2396_parser#initialize_regexp()","uri::generic#inspect()","uri::rfc2396_parser#inspect()","uri::rfc2396_parser#inspect()","uri::join()","uri::rfc2396_parser#join()","uri::rfc2396_parser#join()","uri::rfc2396_parser#make_regexp()","uri::rfc2396_parser#make_regexp()","uri::generic#merge()","uri::generic#merge!()","uri::generic#merge_path()","uri::ftp::new()","uri::generic::new()","uri::ldap::new()","uri::mailto::new()","uri::rfc2396_parser::new()","uri::rfc2396_parser::new()","uri::generic#normalize()","uri::generic#normalize!()","uri::generic#opaque=()","uri::http#origin()","uri::parse()","uri::rfc2396_parser#parse()","uri::rfc2396_parser#parse()","uri::ldap#parse_dn()","uri::ldap#parse_query()","uri::generic#parser()","uri::generic#password()","uri::generic#password=()","uri::ftp#path()","uri::generic#path=()","uri::generic#port=()","uri::generic#query=()","uri::regexp()","uri::register_scheme()","uri::generic#registry=()","uri::generic#relative?()","uri::generic#replace!()","uri::http#request_uri()","uri::ws#request_uri()","uri::generic#route_from()","uri::generic#route_to()","uri::generic#scheme=()","uri::scheme_list()","uri::ldap#scope()","uri::ldap#scope=()","uri::generic#select()","uri::ldap#set_attributes()","uri::ldap#set_dn()","uri::ldap#set_extensions()","uri::ldap#set_filter()","uri::mailto#set_headers()","uri::file#set_host()","uri::generic#set_host()","uri::generic#set_opaque()","uri::file#set_password()","uri::generic#set_password()","uri::ftp#set_path()","uri::generic#set_path()","uri::file#set_port()","uri::generic#set_port()","uri::generic#set_scheme()","uri::ldap#set_scope()","uri::mailto#set_to()","uri::ftp#set_typecode()","uri::file#set_user()","uri::generic#set_user()","uri::file#set_userinfo()","uri::generic#set_userinfo()","uri::split()","uri::rfc2396_parser#split()","uri::rfc2396_parser#split()","uri::generic#split_path()","uri::generic#split_userinfo()","uri::mailto#to=()","uri::mailto#to_mailtext()","uri::mailto#to_rfc822text()","uri::ftp#to_s()","uri::generic#to_s()","uri::mailto#to_s()","uri::ftp#typecode=()","uri::rfc2396_parser#unescape()","uri::rfc2396_parser#unescape()","uri::generic#user()","uri::generic#user=()","uri::generic#userinfo()","uri::generic#userinfo=()"],"info":[["Kernel","","Kernel.html","",""],["URI","","URI.html","","<p>URI is a module providing classes to handle Uniform Resource Identifiers (RFC2396).\n<p>Features\n<p>Uniform way …\n"],["URI::BadURIError","","URI/BadURIError.html","","<p>URI is valid, bad usage is not.\n"],["URI::Error","","URI/Error.html","","<p>Base class for all URI exceptions.\n"],["URI::FTP","","URI/FTP.html","","<p>FTP URI syntax is defined by RFC1738 section 3.2.\n<p>This class will be redesigned because of difference …\n"],["URI::File","","URI/File.html","","<p>The “file” URI is defined by RFC8089.\n"],["URI::Generic","","URI/Generic.html","","<p>Base class for all URI classes. Implements generic URI syntax as per RFC 2396.\n"],["URI::HTTP","","URI/HTTP.html","","<p>The syntax of HTTP URIs is defined in RFC1738 section 3.3.\n<p>Note that the Ruby URI library allows HTTP …\n"],["URI::HTTPS","","URI/HTTPS.html","","<p>The default port for HTTPS URIs is 443, and the scheme is &#39;https:&#39; rather than &#39;http:&#39;. …\n"],["URI::InvalidComponentError","","URI/InvalidComponentError.html","","<p>Not a URI component.\n"],["URI::InvalidURIError","","URI/InvalidURIError.html","","<p>Not a URI.\n"],["URI::LDAP","","URI/LDAP.html","","<p>LDAP URI SCHEMA (described in RFC2255).\n"],["URI::LDAPS","","URI/LDAPS.html","","<p>The default port for LDAPS URIs is 636, and the scheme is &#39;ldaps:&#39; rather than &#39;ldap:&#39;. …\n"],["URI::MailTo","","URI/MailTo.html","","<p>RFC6068, the mailto URL scheme.\n"],["URI::Parser","","URI/Parser.html","","<p>Class that parses String&#39;s into URI&#39;s.\n<p>It contains a Hash set of patterns and Regexp&#39;s that …\n"],["URI::REGEXP","","URI/REGEXP.html","","<p>Includes URI::REGEXP::PATTERN\n"],["URI::RFC2396_Parser","","URI/RFC2396_Parser.html","","<p>Class that parses String&#39;s into URI&#39;s.\n<p>It contains a Hash set of patterns and Regexp&#39;s that …\n"],["URI::RFC2396_REGEXP","","URI/RFC2396_REGEXP.html","","<p>Includes URI::REGEXP::PATTERN\n"],["URI::RFC2396_REGEXP::PATTERN","","URI/RFC2396_REGEXP/PATTERN.html","","<p>Patterns used to parse URI&#39;s\n"],["URI::RFC3986_Parser","","URI/RFC3986_Parser.html","",""],["URI::Schemes","","URI/Schemes.html","",""],["URI::Util","","URI/Util.html","",""],["URI::WS","","URI/WS.html","","<p>The syntax of WS URIs is defined in RFC6455 section 3.\n<p>Note that the Ruby URI library allows WS URLs containing …\n"],["URI::WSS","","URI/WSS.html","","<p>The default port for WSS URIs is 443, and the scheme is &#39;wss:&#39; rather than &#39;ws:&#39;. Other …\n"],["+","URI::Generic","URI/Generic.html#method-i-2B","(oth)",""],["-","URI::Generic","URI/Generic.html#method-i-2D","(oth)",""],["==","URI::Generic","URI/Generic.html#method-i-3D-3D","(oth)","<p>Compares two URIs.\n"],["URI","Kernel","Kernel.html#method-i-URI","(uri)","<p>Returns <code>uri</code> converted to an URI object.\n"],["URI","Kernel","Kernel.html#method-c-URI","(uri)","<p>Returns <code>uri</code> converted to an URI object.\n"],["_decode_uri_component","URI","URI.html#method-c-_decode_uri_component","(regexp, str, enc)",""],["_encode_uri_component","URI","URI.html#method-c-_encode_uri_component","(regexp, table, str, enc)",""],["absolute","URI::Generic","URI/Generic.html#method-i-absolute","()",""],["absolute?","URI::Generic","URI/Generic.html#method-i-absolute-3F","()","<p>Returns true if URI has a scheme (e.g. http:// or https://) specified.\n"],["attributes","URI::LDAP","URI/LDAP.html#method-i-attributes","()","<p>Returns attributes.\n"],["attributes=","URI::LDAP","URI/LDAP.html#method-i-attributes-3D","(val)","<p>Setter for attributes <code>val</code>.\n"],["authority","URI::HTTP","URI/HTTP.html#method-i-authority","()","<p>Description\n<p>Returns the authority for an HTTP uri, as defined in datatracker.ietf.org/doc/html/rfc3986/#section-3.2 …\n"],["build","URI::FTP","URI/FTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::FTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::File","URI/File.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::File object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::Generic","URI/Generic.html#method-c-build","(args)","<p>Synopsis\n<p>See ::new.\n<p>Description\n"],["build","URI::HTTP","URI/HTTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::HTTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::LDAP","URI/LDAP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::LDAP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::MailTo","URI/MailTo.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::MailTo object from components, with syntax checking.\n<p>Components can be provided …\n"],["build","URI::WS","URI/WS.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::WS object from components, with syntax checking.\n<p>The components accepted …\n"],["build2","URI::Generic","URI/Generic.html#method-c-build2","(args)","<p>Synopsis\n<p>See ::new.\n<p>Description\n"],["build_path_query","URI::LDAP","URI/LDAP.html#method-i-build_path_query","()","<p>Private method to assemble <code>query</code> from <code>attributes</code>, <code>scope</code>, <code>filter</code>, and <code>extensions</code>.\n"],["check_headers","URI::MailTo","URI/MailTo.html#method-i-check_headers","(v)","<p>Checks the headers <code>v</code> component against either\n<p>HEADER_REGEXP\n\n"],["check_host","URI::Generic","URI/Generic.html#method-i-check_host","(v)","<p>Checks the host <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :HOST.\n<p>Can not …\n"],["check_opaque","URI::Generic","URI/Generic.html#method-i-check_opaque","(v)","<p>Checks the opaque <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :OPAQUE. …\n"],["check_password","URI::File","URI/File.html#method-i-check_password","(user)","<p>raise InvalidURIError\n"],["check_password","URI::Generic","URI/Generic.html#method-i-check_password","(v, user = @user)","<p>Checks the password <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :USERINFO. …\n"],["check_path","URI::Generic","URI/Generic.html#method-i-check_path","(v)","<p>Checks the path <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :ABS_PATH and …\n"],["check_port","URI::Generic","URI/Generic.html#method-i-check_port","(v)","<p>Checks the port <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :PORT.\n<p>Can not …\n"],["check_scheme","URI::Generic","URI/Generic.html#method-i-check_scheme","(v)","<p>Checks the scheme <code>v</code> component against the URI::Parser Regexp for :SCHEME.\n"],["check_to","URI::MailTo","URI/MailTo.html#method-i-check_to","(v)","<p>Checks the to <code>v</code> component.\n"],["check_typecode","URI::FTP","URI/FTP.html#method-i-check_typecode","(v)","<p>Validates typecode <code>v</code>, returns <code>true</code> or <code>false</code>.\n"],["check_user","URI::File","URI/File.html#method-i-check_user","(user)","<p>raise InvalidURIError\n"],["check_user","URI::Generic","URI/Generic.html#method-i-check_user","(v)","<p>Checks the user <code>v</code> component for RFC2396 compliance and against the URI::Parser Regexp for :USERINFO. …\n"],["check_userinfo","URI::File","URI/File.html#method-i-check_userinfo","(user)","<p>raise InvalidURIError\n"],["check_userinfo","URI::Generic","URI/Generic.html#method-i-check_userinfo","(user, password = nil)","<p>Checks the <code>user</code> and <code>password</code>.\n<p>If <code>password</code> is not provided, then <code>user</code> is split, using URI::Generic.split_userinfo …\n"],["coerce","URI::Generic","URI/Generic.html#method-i-coerce","(oth)","<p>Args\n<p><code>v</code> &mdash; URI or String\n\n<p>Description\n"],["component","URI::Generic","URI/Generic.html#method-c-component","()","<p>Components of the URI in the order.\n"],["component","URI::Generic","URI/Generic.html#method-i-component","()","<p>Components of the URI in the order.\n"],["component_ary","URI::Generic","URI/Generic.html#method-i-component_ary","()","<p>Returns an Array of the components defined from the COMPONENT Array.\n"],["convert_to_uri","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-convert_to_uri","(uri)",""],["convert_to_uri","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-convert_to_uri","(uri)",""],["decode_uri_component","URI","URI.html#method-c-decode_uri_component","(str, enc=Encoding::UTF_8)","<p>Decodes given <code>str</code> of URL-encoded data.\n<p>This does not decode + to SP.\n"],["decode_www_form","URI","URI.html#method-c-decode_www_form","(str, enc=Encoding::UTF_8, separator: '&', use__charset_: false, isindex: false)","<p>Decodes URL-encoded form data from given <code>str</code>.\n<p>This decodes application/x-www-form-urlencoded data and …\n"],["decode_www_form_component","URI","URI.html#method-c-decode_www_form_component","(str, enc=Encoding::UTF_8)","<p>Decodes given <code>str</code> of URL-encoded form data.\n<p>This decodes + to SP.\n<p>See URI.encode_www_form_component, URI.decode_www_form …\n"],["decoded_password","URI::Generic","URI/Generic.html#method-i-decoded_password","()","<p>Returns the password component after URI decoding.\n"],["decoded_user","URI::Generic","URI/Generic.html#method-i-decoded_user","()","<p>Returns the user component after URI decoding.\n"],["default_port","URI::Generic","URI/Generic.html#method-c-default_port","()","<p>Returns default port.\n"],["default_port","URI::Generic","URI/Generic.html#method-i-default_port","()","<p>Returns default port.\n"],["dn","URI::LDAP","URI/LDAP.html#method-i-dn","()","<p>Returns dn.\n"],["dn=","URI::LDAP","URI/LDAP.html#method-i-dn-3D","(val)","<p>Setter for dn <code>val</code>.\n"],["encode_uri_component","URI","URI.html#method-c-encode_uri_component","(str, enc=nil)","<p>Encodes <code>str</code> using URL encoding\n<p>This encodes SP to %20 instead of +.\n"],["encode_www_form","URI","URI.html#method-c-encode_www_form","(enum, enc=nil)","<p>Generates URL-encoded form data from given <code>enum</code>.\n<p>This generates application/x-www-form-urlencoded data …\n"],["encode_www_form_component","URI","URI.html#method-c-encode_www_form_component","(str, enc=nil)","<p>Encodes given <code>str</code> to URL-encoded form data.\n<p>This method doesn&#39;t convert *, -, ., 0-9, A-Z, _, a-z, …\n"],["eql?","URI::Generic","URI/Generic.html#method-i-eql-3F","(oth)",""],["escape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p><code>str</code> &mdash; String to make safe\n<p><code>unsafe</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:UNSAFE]</code>\n"],["escape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p><code>str</code> &mdash; String to make safe\n<p><code>unsafe</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:UNSAFE]</code>\n"],["escape_userpass","URI::Generic","URI/Generic.html#method-i-escape_userpass","(v)","<p>Escapes &#39;user:password&#39; <code>v</code> based on RFC 1738 section 3.1.\n"],["extensions","URI::LDAP","URI/LDAP.html#method-i-extensions","()","<p>Returns extensions.\n"],["extensions=","URI::LDAP","URI/LDAP.html#method-i-extensions-3D","(val)","<p>Setter for extensions <code>val</code>.\n"],["extract","URI","URI.html#method-c-extract","(str, schemes = nil, &block)","<p>Synopsis\n\n<pre>URI::extract(str[, schemes][,&amp;blk])</pre>\n<p>Args\n"],["extract","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-extract","(str, schemes = nil)","<p>Args\n<p><code>str</code> &mdash; String to search\n<p><code>schemes</code> &mdash; Patterns to apply to <code>str</code>\n"],["extract","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-extract","(str, schemes = nil)","<p>Args\n<p><code>str</code> &mdash; String to search\n<p><code>schemes</code> &mdash; Patterns to apply to <code>str</code>\n"],["filter","URI::LDAP","URI/LDAP.html#method-i-filter","()","<p>Returns filter.\n"],["filter=","URI::LDAP","URI/LDAP.html#method-i-filter-3D","(val)","<p>Setter for filter <code>val</code>.\n"],["find_proxy","URI::Generic","URI/Generic.html#method-i-find_proxy","(env=ENV)","<p>Returns a proxy URI. The proxy URI is obtained from environment variables such as http_proxy, ftp_proxy …\n"],["for","URI","URI.html#method-c-for","(scheme, *arguments, default: Generic)","<p>Construct a URI instance, using the scheme to detect the appropriate class from <code>URI.scheme_list</code>.\n"],["fragment=","URI::Generic","URI/Generic.html#method-i-fragment-3D","(v)","<p>Checks the fragment <code>v</code> component against the URI::Parser Regexp for :FRAGMENT.\n<p>Args\n<p><code>v</code> &mdash; String\n"],["hash","URI::Generic","URI/Generic.html#method-i-hash","()",""],["headers=","URI::MailTo","URI/MailTo.html#method-i-headers-3D","(v)","<p>Setter for headers <code>v</code>.\n"],["hierarchical?","URI::Generic","URI/Generic.html#method-i-hierarchical-3F","()","<p>Returns true if URI is hierarchical.\n<p>Description\n<p>URI has components listed in order of decreasing significance …\n"],["hierarchical?","URI::LDAP","URI/LDAP.html#method-i-hierarchical-3F","()","<p>Checks if URI has a path. For URI::LDAP this will return <code>false</code>.\n"],["host=","URI::Generic","URI/Generic.html#method-i-host-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["hostname","URI::Generic","URI/Generic.html#method-i-hostname","()","<p>Extract the host part of the URI and unwrap brackets for IPv6 addresses.\n<p>This method is the same as URI::Generic#host …\n"],["hostname=","URI::Generic","URI/Generic.html#method-i-hostname-3D","(v)","<p>Sets the host part of the URI as the argument with brackets for IPv6 addresses.\n<p>This method is the same …\n"],["initialize_pattern","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_pattern","(opts = {})","<p>Constructs the default Hash of patterns.\n"],["initialize_pattern","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_pattern","(opts = {})","<p>Constructs the default Hash of patterns.\n"],["initialize_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_regexp","(pattern)","<p>Constructs the default Hash of Regexp&#39;s.\n"],["initialize_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-initialize_regexp","(pattern)","<p>Constructs the default Hash of Regexp&#39;s.\n"],["inspect","URI::Generic","URI/Generic.html#method-i-inspect","()",""],["inspect","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-inspect","()",""],["inspect","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-inspect","()",""],["join","URI","URI.html#method-c-join","(*str)","<p>Synopsis\n\n<pre>URI::join(str[, str, ...])</pre>\n<p>Args\n"],["join","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-join","(*uris)","<p>Args\n<p><code>uris</code> &mdash; an Array of Strings\n\n<p>Description\n"],["join","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-join","(*uris)","<p>Args\n<p><code>uris</code> &mdash; an Array of Strings\n\n<p>Description\n"],["make_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-make_regexp","(schemes = nil)","<p>Returns Regexp that is default <code>self.regexp[:ABS_URI_REF]</code>, unless <code>schemes</code> is provided. Then it is a Regexp.union …\n"],["make_regexp","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-make_regexp","(schemes = nil)","<p>Returns Regexp that is default <code>self.regexp[:ABS_URI_REF]</code>, unless <code>schemes</code> is provided. Then it is a Regexp.union …\n"],["merge","URI::Generic","URI/Generic.html#method-i-merge","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["merge!","URI::Generic","URI/Generic.html#method-i-merge-21","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["merge_path","URI::Generic","URI/Generic.html#method-i-merge_path","(base, rel)","<p>Merges a base path <code>base</code>, with relative path <code>rel</code>, returns a modified base path.\n"],["new","URI::FTP","URI/FTP.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = nil, arg_check = false)","<p>Description\n<p>Creates a new URI::FTP object from generic URL components with no syntax checking.\n<p>Unlike build(), …\n"],["new","URI::Generic","URI/Generic.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = DEFAULT_PARSER, arg_check = false)","<p>Args\n<p><code>scheme</code> &mdash; Protocol scheme, i.e. &#39;http&#39;,&#39;ftp&#39;,&#39;mailto&#39; and so on.\n<p><code>userinfo</code> &mdash; User …\n"],["new","URI::LDAP","URI/LDAP.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::LDAP object from generic URI components as per RFC 2396. No LDAP-specific …\n"],["new","URI::MailTo","URI/MailTo.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::MailTo object from generic URL components with no syntax checking.\n<p>This …\n"],["new","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>([<span class=\"ruby-identifier\">opts</span>])\n</pre>\n<p>Args\n"],["new","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Parser</span>.<span class=\"ruby-identifier\">new</span>([<span class=\"ruby-identifier\">opts</span>])\n</pre>\n<p>Args\n"],["normalize","URI::Generic","URI/Generic.html#method-i-normalize","()","<p>Returns normalized URI.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;uri&#39;</span>\n\n<span class=\"ruby-constant\">URI</span>(<span class=\"ruby-string\">&quot;HTTP://my.EXAMPLE.com&quot;</span>).<span class=\"ruby-identifier\">normalize</span>\n<span class=\"ruby-comment\">#=&gt; #&lt;URI::HTTP http://my.example.com/&gt;</span>\n</pre>\n"],["normalize!","URI::Generic","URI/Generic.html#method-i-normalize-21","()","<p>Destructive version of #normalize.\n"],["opaque=","URI::Generic","URI/Generic.html#method-i-opaque-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["origin","URI::HTTP","URI/HTTP.html#method-i-origin","()","<p>Description\n<p>Returns the origin for an HTTP uri, as defined in datatracker.ietf.org/doc/html/rfc6454.\n<p>Example: …\n"],["parse","URI","URI.html#method-c-parse","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-identifier\">uri_str</span>)\n</pre>\n<p>Args\n"],["parse","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-parse","(uri)","<p>Args\n<p><code>uri</code> &mdash; String\n\n<p>Description\n"],["parse","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-parse","(uri)","<p>Args\n<p><code>uri</code> &mdash; String\n\n<p>Description\n"],["parse_dn","URI::LDAP","URI/LDAP.html#method-i-parse_dn","()","<p>Private method to cleanup <code>dn</code> from using the <code>path</code> component attribute.\n"],["parse_query","URI::LDAP","URI/LDAP.html#method-i-parse_query","()","<p>Private method to cleanup <code>attributes</code>, <code>scope</code>, <code>filter</code>, and <code>extensions</code> from using the <code>query</code> component attribute. …\n"],["parser","URI::Generic","URI/Generic.html#method-i-parser","()","<p>Returns the parser to be used.\n<p>Unless a URI::Parser is defined, DEFAULT_PARSER is used.\n"],["password","URI::Generic","URI/Generic.html#method-i-password","()","<p>Returns the password component (without URI decoding).\n"],["password=","URI::Generic","URI/Generic.html#method-i-password-3D","(password)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["path","URI::FTP","URI/FTP.html#method-i-path","()","<p>Returns the path from an FTP URI.\n<p>RFC 1738 specifically states that the path for an FTP URI does not include …\n"],["path=","URI::Generic","URI/Generic.html#method-i-path-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["port=","URI::Generic","URI/Generic.html#method-i-port-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["query=","URI::Generic","URI/Generic.html#method-i-query-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["regexp","URI","URI.html#method-c-regexp","(schemes = nil)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">regexp</span>([<span class=\"ruby-identifier\">match_schemes</span>])\n</pre>\n<p>Args\n"],["register_scheme","URI","URI.html#method-c-register_scheme","(scheme, klass)","<p>Register the given <code>klass</code> to be instantiated when parsing URLs with the given <code>scheme</code>. Note that currently …\n"],["registry=","URI::Generic","URI/Generic.html#method-i-registry-3D","(v)",""],["relative?","URI::Generic","URI/Generic.html#method-i-relative-3F","()","<p>Returns true if URI does not have a scheme (e.g. http:// or https://) specified.\n"],["replace!","URI::Generic","URI/Generic.html#method-i-replace-21","(oth)","<p>Replaces self by other URI object.\n"],["request_uri","URI::HTTP","URI/HTTP.html#method-i-request_uri","()","<p>Description\n<p>Returns the full path for an HTTP request, as required by Net::HTTP::Get.\n<p>If the URI contains …\n"],["request_uri","URI::WS","URI/WS.html#method-i-request_uri","()","<p>Description\n<p>Returns the full path for a WS URI, as required by Net::HTTP::Get.\n<p>If the URI contains a query, …\n"],["route_from","URI::Generic","URI/Generic.html#method-i-route_from","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["route_to","URI::Generic","URI/Generic.html#method-i-route_to","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["scheme=","URI::Generic","URI/Generic.html#method-i-scheme-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["scheme_list","URI","URI.html#method-c-scheme_list","()","<p>Returns a Hash of the defined schemes.\n"],["scope","URI::LDAP","URI/LDAP.html#method-i-scope","()","<p>Returns scope.\n"],["scope=","URI::LDAP","URI/LDAP.html#method-i-scope-3D","(val)","<p>Setter for scope <code>val</code>.\n"],["select","URI::Generic","URI/Generic.html#method-i-select","(*components)","<p>Args\n<p><code>components</code> &mdash; Multiple Symbol arguments defined in URI::HTTP.\n\n<p>Description\n"],["set_attributes","URI::LDAP","URI/LDAP.html#method-i-set_attributes","(val)","<p>Private setter for attributes <code>val</code>.\n"],["set_dn","URI::LDAP","URI/LDAP.html#method-i-set_dn","(val)","<p>Private setter for dn <code>val</code>.\n"],["set_extensions","URI::LDAP","URI/LDAP.html#method-i-set_extensions","(val)","<p>Private setter for extensions <code>val</code>.\n"],["set_filter","URI::LDAP","URI/LDAP.html#method-i-set_filter","(val)","<p>Private setter for filter <code>val</code>.\n"],["set_headers","URI::MailTo","URI/MailTo.html#method-i-set_headers","(v)","<p>Private setter for headers <code>v</code>.\n"],["set_host","URI::File","URI/File.html#method-i-set_host","(v)","<p>Protected setter for the host component <code>v</code>.\n<p>See also URI::Generic.host=.\n"],["set_host","URI::Generic","URI/Generic.html#method-i-set_host","(v)","<p>Protected setter for the host component <code>v</code>.\n<p>See also URI::Generic.host=.\n"],["set_opaque","URI::Generic","URI/Generic.html#method-i-set_opaque","(v)","<p>Protected setter for the opaque component <code>v</code>.\n<p>See also URI::Generic.opaque=.\n"],["set_password","URI::File","URI/File.html#method-i-set_password","(v)","<p>do nothing\n"],["set_password","URI::Generic","URI/Generic.html#method-i-set_password","(v)","<p>Protected setter for the password component <code>v</code>.\n<p>See also URI::Generic.password=.\n"],["set_path","URI::FTP","URI/FTP.html#method-i-set_path","(v)","<p>Private setter for the path of the URI::FTP.\n"],["set_path","URI::Generic","URI/Generic.html#method-i-set_path","(v)","<p>Protected setter for the path component <code>v</code>.\n<p>See also URI::Generic.path=.\n"],["set_port","URI::File","URI/File.html#method-i-set_port","(v)","<p>do nothing\n"],["set_port","URI::Generic","URI/Generic.html#method-i-set_port","(v)","<p>Protected setter for the port component <code>v</code>.\n<p>See also URI::Generic.port=.\n"],["set_scheme","URI::Generic","URI/Generic.html#method-i-set_scheme","(v)","<p>Protected setter for the scheme component <code>v</code>.\n<p>See also URI::Generic.scheme=.\n"],["set_scope","URI::LDAP","URI/LDAP.html#method-i-set_scope","(val)","<p>Private setter for scope <code>val</code>.\n"],["set_to","URI::MailTo","URI/MailTo.html#method-i-set_to","(v)","<p>Private setter for to <code>v</code>.\n"],["set_typecode","URI::FTP","URI/FTP.html#method-i-set_typecode","(v)","<p>Private setter for the typecode <code>v</code>.\n<p>See also URI::FTP.typecode=.\n"],["set_user","URI::File","URI/File.html#method-i-set_user","(v)","<p>do nothing\n"],["set_user","URI::Generic","URI/Generic.html#method-i-set_user","(v)","<p>Protected setter for the user component <code>v</code>.\n<p>See also URI::Generic.user=.\n"],["set_userinfo","URI::File","URI/File.html#method-i-set_userinfo","(v)","<p>do nothing\n"],["set_userinfo","URI::Generic","URI/Generic.html#method-i-set_userinfo","(user, password = nil)","<p>Protected setter for the <code>user</code> component, and <code>password</code> if available (with validation).\n<p>See also URI::Generic.userinfo= …\n"],["split","URI","URI.html#method-c-split","(uri)","<p>Synopsis\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">URI</span><span class=\"ruby-operator\">::</span><span class=\"ruby-identifier\">split</span>(<span class=\"ruby-identifier\">uri</span>)\n</pre>\n<p>Args\n"],["split","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-split","(uri)","<p>Returns a split URI against <code>regexp[:ABS_URI]</code>.\n"],["split","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-split","(uri)","<p>Returns a split URI against <code>regexp[:ABS_URI]</code>.\n"],["split_path","URI::Generic","URI/Generic.html#method-i-split_path","(path)","<p>Returns an Array of the path split on &#39;/&#39;.\n"],["split_userinfo","URI::Generic","URI/Generic.html#method-i-split_userinfo","(ui)","<p>Returns the userinfo <code>ui</code> as <code>[user, password]</code> if properly formatted as &#39;user:password&#39;.\n"],["to=","URI::MailTo","URI/MailTo.html#method-i-to-3D","(v)","<p>Setter for to <code>v</code>.\n"],["to_mailtext","URI::MailTo","URI/MailTo.html#method-i-to_mailtext","()","<p>Returns the RFC822 e-mail text equivalent of the URL, as a String.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;uri&#39;</span>\n\n<span class=\"ruby-identifier\">uri</span> = <span class=\"ruby-constant\">URI</span>.<span class=\"ruby-identifier\">parse</span>(<span class=\"ruby-string\">&quot;mailto:ruby-list@ruby-lang.org?Subject=subscribe&amp;cc=myaddr&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_rfc822text","URI::MailTo","URI/MailTo.html#method-i-to_rfc822text","()",""],["to_s","URI::FTP","URI/FTP.html#method-i-to_s","()","<p>Returns a String representation of the URI::FTP.\n"],["to_s","URI::Generic","URI/Generic.html#method-i-to_s","()","<p>Constructs String from URI.\n"],["to_s","URI::MailTo","URI/MailTo.html#method-i-to_s","()","<p>Constructs String from URI.\n"],["typecode=","URI::FTP","URI/FTP.html#method-i-typecode-3D","(typecode)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["unescape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p><code>str</code> &mdash; String to remove escapes from\n<p><code>escaped</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:ESCAPED]</code>\n"],["unescape","URI::RFC2396_Parser","URI/RFC2396_Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p><code>str</code> &mdash; String to remove escapes from\n<p><code>escaped</code> &mdash; Regexp to apply. Defaults to <code>self.regexp[:ESCAPED]</code>\n"],["user","URI::Generic","URI/Generic.html#method-i-user","()","<p>Returns the user component (without URI decoding).\n"],["user=","URI::Generic","URI/Generic.html#method-i-user-3D","(user)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["userinfo","URI::Generic","URI/Generic.html#method-i-userinfo","()","<p>Returns the userinfo, either as &#39;user&#39; or &#39;user:password&#39;.\n"],["userinfo=","URI::Generic","URI/Generic.html#method-i-userinfo-3D","(userinfo)","<p>Sets userinfo, argument is string like &#39;name:pass&#39;.\n"]]}}